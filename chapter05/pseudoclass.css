/* 자손 결합자 */
.outer li {
  color: olivedrab;
}

/* 자식(1촌 자손) 결합자 */
.outer > li {
  color: dodgerblue;
}

/* 자식의 자손을 선택하고 싶다면 작성하는 코드 */
.outer > li li {
  text-decoration: underline;
}
/* 즉 > 과 공백 ( ) 을 이용하여 특정한 조건을 걸어서 CSS를 적용시킬 수 있습니다.

CSS 문서에서 .outer li 부분(2-4번 라인) 에서 color : olivedrab; 을 주석처리하면 .outer > li (7-9번 라인)에 지정한 dodgerbleu가 자식 뿐만 아니라 손자까지 (outer기준) 적용되는 것을 확인할 수 있는데, 이는 서체 및 텍스트 관련 CSS의 일부 속성들이 그 자식에게 까지 자동 상속되기 때문

즉, 자식 결합자라도 적용한 속성이 상속되는 속성이라면 이를 덮어쓰는 다른 선택자와 속성을 지정하지 않는 한 그 아래의 자식들도 해당 속성을 상속받습니다.

-> 상속은 추후 수업
*/
/* 뒤따르는 모든 동생들 결합자 */
.starter ~ li {
  font-style: italic;
}

/* 뒤따르는 다음 동생자 하나만 */
.starter + li {
  font-weight: bold;
}

/* 첫번째, 마지막 요소 가상클래스 */
ol li:first-child,
ol li:last-child{
  color: yellowgreen;
}
/* 
ol 내의 li 태그의 첫번째 요소(first-child)와, li태그의 마지막 요소(last-child)를 지정하여,특정 태그에 속성을 가입하지 않고도 CSS를 적용시킬 수 있음

밑에는 응용
*/
/* ~가 아닌 요소 가상 클래스 */
.outer > li:not(:last-child) {
  text-decoration: line-through;
}

ul:not(.outer) li {
  font-weight: bold;
}

/* 
1번 해석 : outer 클래스의 직계 자식(>)인 li 태그중에 마지막 요소(last-child)가 아닌것을 골라서 취소선(line-through)를 적용한다는 의미

2번 해석 : ul 태그 중에 outer 클래스가 아닌 것을 골라서 그 안에있는 li 태그에만 볼드체 적용. 
그 결과 과일 항목 아래에있는 ul 태그는 outer 클래스가 아니기 때문에 사과/포도/딸기/키위만 볼드체 적용
*/
/* ~번째 요소 가상 클래스 */
ol li:nth-child(3){
  font-weight: bold;
  color: deeppink;
}

ol li:nth-child(4n){ /* 4,8에 적용 */
  font-weight: bold;
  color: deepskyblue;
}

ol li:nth-child(2n+3){ /*3,5,7,9 에 적용*/
  font-weight: bold;
  color: darkgreen;
}

ol li:nth-child(even) { /*짝수에만, 홀수는 odd*/
  font-weight: bold;
  color: white;
}
/* 
  결과 화면시에 이삼에만 deeppink 적용이 되어있음
  nth-child()의 소괄호 내에 들어갈 수 있는 사례:
    1) # : 특정숫자
    2) #n : n번째 바다
    3) #n + @ : n번째+@의 값에
    4) odd : 홀수번째에
    5) even : 짝수번째에
  
    
*/